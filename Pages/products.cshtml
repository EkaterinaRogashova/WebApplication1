@page
@model IndexModel
@{
    ViewData["Title"] = "Products";
}

<div id="app" class="container mt-4">
    <div class="card mb-4">
        <div class="card-body">
            <h1 class="mb-4">Список товаров</h1>

            <div class="mb-4">
                <h2 class="mb-3">Фильтр по названию</h2>
                <form id="searchForm" class="d-flex">
                    <input id="searchText" class="form-control mr-2" placeholder="Введите название" />
                    <button type="submit" class="btn btn-primary">Найти товар</button>
                </form>
            </div>


            <div class="table-responsive mb-4">
                <table class="table table-striped" id="products-table">
                    <thead class="thead-dark">
                        <tr>
                            <th>ID</th>
                            <th>Название</th>
                            <th>Цена</th>
                            <th>Категория</th>
                            <th>Владелец</th>
                            <th>Действия</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Данные будут загружены через JavaScript -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            <h2 class="mb-4">Добавить товар</h2>
            <form id="add-product-form">
                <div class="form-group row mb-3">
                    <label for="name" class="col-sm-2 col-form-label">Название</label>
                    <div class="col-sm-10">
                        <input type="text" class="form-control" id="name" placeholder="Введите название" required>
                    </div>
                </div>

                <div class="form-group row mb-3">
                    <label for="price" class="col-sm-2 col-form-label">Цена</label>
                    <div class="col-sm-10">
                        <input type="number" step="0.01" class="form-control" id="price" placeholder="Введите цену" required>
                    </div>
                </div>

                <div class="form-group row mb-3">
                    <label for="categorySelect" class="col-sm-2 col-form-label">Категория</label>
                    <div class="col-sm-10">
                        <select id="categorySelect" class="form-control" required>
                            <option value="">Выберите категорию</option>
                        </select>
                    </div>
                </div>

                <div class="form-group row mb-3">
                    <label for="ownerSelect" class="col-sm-2 col-form-label">Владелец</label>
                    <div class="col-sm-10">
                        <select id="ownerSelect" class="form-control" required>
                            <option value="">Выберите владельца</option>
                        </select>
                    </div>
                </div>

                <div class="form-group row">
                    <div class="col-sm-10 offset-sm-2">
                        <button type="submit" class="btn btn-primary">Добавить товар</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            loadSelectOptions();
            loadReferences();

            const categoriesMap = {};
            const usersMap = {};


            loadProducts();
            // Основная функция загрузки
            function loadProducts() {
                let url = `http://localhost:3000/products`;

                fetch(url)
                    .then(response => {
                        return response.json();
                    })
                    .then(data => {
                        renderProducts(data);
                    });
            }
            //отображение таблицы
            function renderProducts(products) {
                const tableBody = document.querySelector('#products-table tbody');
                tableBody.innerHTML = products.map(product => `
                    <tr>
                        <td>${product.id}</td>
                        <td>${product.name}</td>
                        <td>${product.price.toFixed(2)}</td>
                        <td>${categoriesMap[product.categoryId] || product.categoryId}</td>
                        <td>${usersMap[product.userOwnerId] || product.userOwnerId}</td>
                        <td>
                            <button class="btn-danger" onclick="Delete('${product.id}')">Удалить</button>
                        </td>
                        <td>
                            <button class="btn-info" onclick="location.href='/edit/${product.id}'">Редактировать</button>
                        </td>
                    </tr>
                `).join('');
            }

            // Обработчик поиска
            document.getElementById('searchForm').addEventListener('submit', async function (e) {
                e.preventDefault();

                const search = document.getElementById('searchText').value;
                await fetch(`http://localhost:3000/products?name=${search}`).then(response => response.json())
                    .then(data => {
                        const tableBody = document.querySelector('#products-table tbody');
                        tableBody.innerHTML = data.map(product => `
                                        <tr>
                                                    <td>${product.id}</td>
                                <td>${product.name}</td>
                                <td>${product.price.toFixed(2)}</td>
                                <td>${categoriesMap[product.categoryId] || product.categoryId}</td>
                                <td>${usersMap[product.userOwnerId] || product.userOwnerId}</td>
                                <td>
                                    <button class="btn-danger" onclick="Delete('${product.id}')">Удалить</button>
                                </td>
                                <td>
                                    <button class="btn-info" onclick="location.href='/edit/${product.id}'">Редактировать</button>
                                </td>
                                        </tr>
                                    `).join('');
                    });


            });

            // Обработчик добавления товара
            document.getElementById('add-product-form').addEventListener('submit', function (e) {
                e.preventDefault();
                const newProduct = {
                    name: document.getElementById('name').value,
                    price: parseFloat(document.getElementById('price').value),
                    categoryId: document.getElementById('categorySelect').value,
                    userOwnerId: document.getElementById('ownerSelect').value
                };

                fetch('http://localhost:3000/products', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(newProduct)
                })
                .then(() => {
                    loadProducts();
                    document.getElementById('add-product-form').reset();
                });
            });

            function loadSelectOptions() {
                Promise.all([
                    fetch('http://localhost:3000/category').then(res => res.json()),
                    fetch('http://localhost:3000/users').then(res => res.json())
                ])
                    .then(([categories, users]) => {
                        const categorySelect = document.getElementById('categorySelect');
                        const ownerSelect = document.getElementById('ownerSelect');

                        // Очистка существующих опций
                        categorySelect.innerHTML = '<option value="">Выберите категорию</option>';
                        ownerSelect.innerHTML = '<option value="">Выберите владельца</option>';

                        // Заполнение категорий, если их несколько
                        categories.forEach(cat => {
                            const option = document.createElement('option');
                            option.value = cat.id;
                            option.textContent = cat.name;
                            categorySelect.appendChild(option);
                        });

                        // Заполнение владельцев
                        users.forEach(user => {
                            const option = document.createElement('option');
                            option.value = user.id;
                            option.textContent = user.name;
                            ownerSelect.appendChild(option);
                        });

                        console.log('Categories:', categories);
                        console.log('Users:', users);
                    })
                    .catch(console.error);

                
            }
            
            function loadReferences() {
                // Загружаем категории
                fetch('http://localhost:3000/category')
                    .then(res => res.json())
                    .then(categories => {
                        categories.forEach(c => {
                            categoriesMap[c.id] = c.name;
                        });
                        // После загрузки категорий можно загрузить пользователей
                        return fetch('http://localhost:3000/users');
                    })
                    .then(res => res.json())
                    .then(users => {
                        users.forEach(u => {
                            usersMap[u.id] = u.name;
                        });
                        // После загрузки всех справечников начинаем загрузку продуктов
                        loadProducts();
                    });
            }
        });

        // Функция удаления
        function Delete(id) {
            if (!confirm('Вы уверены, что хотите удалить этот товар?')) return;

            fetch(`http://localhost:3000/products/${id}`, {
                method: 'DELETE'
            });
            location.reload();
        }
    </script>
}
<style>
    .pagination-container {
    margin-top: 20px;
    display: flex;
    justify-content: center;
}

.pagination {
    display: flex;
    gap: 5px;
}

.pagination button {
    padding: 5px 10px;
    border: 1px solid #ddd;
    background: #fff;
    cursor: pointer;
    border-radius: 4px;
}

.pagination button.active {
    background-color: #007bff;
    color: white;
    border-color: #007bff;
}

.pagination button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}
</style>